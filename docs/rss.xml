<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>独钓寒江雪的博客</title><link>https://niaidaye.github.io</link><description>我是AX，分享输出学习过中的一点点心得，愿与君共勉。您的点赞👍，收藏⭐️，是我创作路上的绊脚石，🤣</description><copyright>独钓寒江雪的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/27543204?v=4</url><title>avatar</title><link>https://niaidaye.github.io</link></image><lastBuildDate>Mon, 21 Oct 2024 14:50:22 +0000</lastBuildDate><managingEditor>独钓寒江雪的博客</managingEditor><ttl>60</ttl><webMaster>独钓寒江雪的博客</webMaster><item><title>JSON Web Token（JWT）解决什么问题？</title><link>https://niaidaye.github.io/post/JSON%20Web%20Token%EF%BC%88JWT%EF%BC%89-jie-jue-shen-me-wen-ti-%EF%BC%9F.html</link><description>JSON Web Token (JWT) 主要解决了以下几个问题：&#13;
&#13;
## 1. 身份认证和授权&#13;
&#13;
JWT 提供了一种安全、可靠的方式来验证用户身份和授权访问权限。</description><guid isPermaLink="true">https://niaidaye.github.io/post/JSON%20Web%20Token%EF%BC%88JWT%EF%BC%89-jie-jue-shen-me-wen-ti-%EF%BC%9F.html</guid><pubDate>Mon, 21 Oct 2024 14:49:49 +0000</pubDate></item><item><title>MySQL死锁是怎么排查的？</title><link>https://niaidaye.github.io/post/MySQL-si-suo-shi-zen-me-pai-cha-de-%EF%BC%9F.html</link><description>MySQL死锁的排查是一个重要的数据库管理任务。</description><guid isPermaLink="true">https://niaidaye.github.io/post/MySQL-si-suo-shi-zen-me-pai-cha-de-%EF%BC%9F.html</guid><pubDate>Sat, 19 Oct 2024 09:08:41 +0000</pubDate></item><item><title>Spring 基础知识</title><link>https://niaidaye.github.io/post/Spring%20-ji-chu-zhi-shi.html</link><description>## 1. Spring和Spring框架&#13;
&#13;
Spring是一个开源的Java开发框架，由Pivotal团队开发，是目前最流行的Java开发框架之一。</description><guid isPermaLink="true">https://niaidaye.github.io/post/Spring%20-ji-chu-zhi-shi.html</guid><pubDate>Tue, 15 Oct 2024 15:13:28 +0000</pubDate></item><item><title>Java知识点-基础语法</title><link>https://niaidaye.github.io/post/Java-zhi-shi-dian---ji-chu-yu-fa.html</link><description># 1. 语法基础&#13;
&#13;
## 1.1 面向对象特性？&#13;
&#13;
- 封装：将数据和操作数据的代码封装在一起，隐藏内部实现细节，只暴露必要的接口。</description><guid isPermaLink="true">https://niaidaye.github.io/post/Java-zhi-shi-dian---ji-chu-yu-fa.html</guid><pubDate>Mon, 14 Oct 2024 13:15:23 +0000</pubDate></item><item><title>MySQL中的锁</title><link>https://niaidaye.github.io/post/MySQL-zhong-de-suo.html</link><description># 锁机制详解&#13;
锁是计算机协调多个进程或线程并发访问某一资源的机制。</description><guid isPermaLink="true">https://niaidaye.github.io/post/MySQL-zhong-de-suo.html</guid><pubDate>Sun, 13 Oct 2024 15:31:39 +0000</pubDate></item><item><title>常用排序（上）</title><link>https://niaidaye.github.io/post/chang-yong-pai-xu-%EF%BC%88-shang-%EF%BC%89.html</link><description>## 前言&#13;
&#13;
---&#13;
&#13;
带着问题来学习算法：&#13;
&#13;
*插入排序和冒泡排序的时间复杂度相同，都是 O(n2)，在实际的软件开发里，为什么我们更倾向于使用插入排序算法而不是冒泡排序算法呢？*&#13;
&#13;
### 如何分析一个“排序算法”？&#13;
&#13;
- **排序算法的执行效率**&#13;
  1. 最好、最坏、平均情况时间复杂度&#13;
  2. 时间复杂度的系数、常数、低阶&#13;
  3. 比较次数和交换（或移动）次数&#13;
- **排序算法的内存消耗**&#13;
  - 原地排序（Sorted in place）：特指空间复杂度为O(1)的排序算法&#13;
- **排序算法的稳定性**&#13;
  - 稳定性：待排序的序列中存在值相等的元素，经过排序之后，相等元素之间原来的先后顺序不变&#13;
  - 稳定排序算法：稳定性不变&#13;
  - 不稳定排序算法：稳定性发生改变&#13;
&#13;
这里为什么要分析排序算法的稳定性，平时学习算法中，一般用数字来排序，两个3，大小不一样吗？在前，在后又有什么关系嘞？我这里举个， 实际开发中的例子，大家一看就能明白啦。</description><guid isPermaLink="true">https://niaidaye.github.io/post/chang-yong-pai-xu-%EF%BC%88-shang-%EF%BC%89.html</guid><pubDate>Tue, 09 Jul 2024 09:30:45 +0000</pubDate></item><item><title>MySQL（InnoDB）事务的多版本并发控制（二）</title><link>https://niaidaye.github.io/post/MySQL%EF%BC%88InnoDB%EF%BC%89-shi-wu-de-duo-ban-ben-bing-fa-kong-zhi-%EF%BC%88-er-%EF%BC%89.html</link><description>对于上次提到的事务 A、B、C 的执行流程，这里我在放上这张图&#13;
&#13;
![事务A、B、C执行流程(1)](https://github.com/niaidaye/niaidaye.github.io/assets/27543204/5df7814d-c482-403d-bdfa-4a9d1cba08bc)&#13;
&#13;
最后执行的查询，结果相信大家都有所了解啦， 事务 B 查到的 k 的值是 3，而事务 A 查到的 k 的值是 1。</description><guid isPermaLink="true">https://niaidaye.github.io/post/MySQL%EF%BC%88InnoDB%EF%BC%89-shi-wu-de-duo-ban-ben-bing-fa-kong-zhi-%EF%BC%88-er-%EF%BC%89.html</guid><pubDate>Fri, 05 Jul 2024 07:44:53 +0000</pubDate></item><item><title>通过“寻找最终推荐人”算法来理解，递归思想</title><link>https://niaidaye.github.io/post/tong-guo-%E2%80%9C-xun-zhao-zui-zhong-tui-jian-ren-%E2%80%9D-suan-fa-lai-li-jie-%EF%BC%8C-di-gui-si-xiang.html</link><description>## 简单介绍一下“寻找最终推荐人”&#13;
&#13;
有这样一个场景——推荐注册返回佣金的这个功能大家应该都不陌生。</description><guid isPermaLink="true">https://niaidaye.github.io/post/tong-guo-%E2%80%9C-xun-zhao-zui-zhong-tui-jian-ren-%E2%80%9D-suan-fa-lai-li-jie-%EF%BC%8C-di-gui-si-xiang.html</guid><pubDate>Thu, 04 Jul 2024 02:55:22 +0000</pubDate></item><item><title>MySQL（InnoDB）事务的多版本并发控制（一）</title><link>https://niaidaye.github.io/post/MySQL%EF%BC%88InnoDB%EF%BC%89-shi-wu-de-duo-ban-ben-bing-fa-kong-zhi-%EF%BC%88-yi-%EF%BC%89.html</link><description>---&#13;
&#13;
最近刚，学到MySQL事务相关的，知识点，想和大家简单聊聊，在MySQL的InnoDB引擎中是如何多个事务同时执行如何保证数据的一致性。</description><guid isPermaLink="true">https://niaidaye.github.io/post/MySQL%EF%BC%88InnoDB%EF%BC%89-shi-wu-de-duo-ban-ben-bing-fa-kong-zhi-%EF%BC%88-yi-%EF%BC%89.html</guid><pubDate>Tue, 02 Jul 2024 12:56:33 +0000</pubDate></item><item><title>OneDay——记录生活</title><link>https://niaidaye.github.io/post/OneDay%E2%80%94%E2%80%94-ji-lu-sheng-huo.html</link><description>## 不一样的开始&#13;
&#13;
​	想跟大家，聊聊这个博客的想法吧，其实从一开始读大学，就开始有想写，个人博客的想法，以前研究过，hexo、通过云服务+WordPress呀，等等但是由于，种种原因吧， 都没坚持✊下来，以前写的文章也没有保存下来，蛮可惜的😂&#13;
&#13;
​	机缘巧合下，看见b站up主——[技术爬爬虾](https://space.bilibili.com/316183842)分享的[仅需一个Github账号，让文字在互联网中永生](https://www.bilibili.com/video/BV1GM4m1m7ZD/)视频，其中一句话引起我的共鸣“如果你想写一段文字，让100年后的人也能访问到，你会写在哪里？”。</description><guid isPermaLink="true">https://niaidaye.github.io/post/OneDay%E2%80%94%E2%80%94-ji-lu-sheng-huo.html</guid><pubDate>Sat, 29 Jun 2024 04:30:03 +0000</pubDate></item></channel></rss>